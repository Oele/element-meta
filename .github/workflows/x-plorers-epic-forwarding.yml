name: Forward epic field value into tracked issues

on:
  issues:
    types: [edited]

jobs:
  forward_epic_field_value:
    name: Forward epic field value into tracked issues
    runs-on: ubuntu-latest
    steps:
      - uses: octokit/graphql-action@v2.x
        id: get_field_value_and_tracked_issues
        with:
          headers: '{"GraphQL-Features": "projects_next_graphql"}'
          query: |
            query info($owner: String!, $repo: String!, $issue_number: Int!, $field_name: String!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issue_number) {
                  projectItems(first: 100) {
                    edges {
                      node {
                        id
                        fieldValueByName(name: $field_name) {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            id
                            name
                            field {
                              ... on ProjectV2SingleSelectField {
                                id
                              }
                            }
                          }
                        }
                        project {
                          id
                        }
                      }
                    }
                  }
                  trackedIssues(first: 100) {
                    edges {
                      node {
                        projectItems(first: 100) {
                          edges {
                            node {
                              id
                              project {
                                id
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          issue_number: ${{ github.event.issue.number }}
          field_name: ${{ env.FIELD_NAME }}
        env:
          FIELD_NAME: "Epic"
          GITHUB_TOKEN: ${{ secrets.ELEMENT_BOT_TOKEN }}
      - uses: actions/github-script@v6
        with:
          script: |
            projectId = "PVT_kwDOAM0swc4AA19d";
            fieldId = "PVTSSF_lADOAM0swc4ALoFYzgJAimw";
            
            const { PROJECT_ITEMS, TRACKED_ISSUES } = process.env;
            
            // Check project membership and extract field value

            const projectItems = JSON.parse(`${PROJECT_ITEMS}`);
            
            if (!projectItems) {
              console.log("Issue is not part of any projects");
              return;
            }
            
            let fieldValueId = null;
            let fieldValueName = null;

            for (const item of projectItems) {
              if (item.node.project.id == projectId && item.node.fieldValueByName && item.node.fieldValueByName.field.id == fieldId) {
                fieldValueId = item.node.fieldValueByName.id;
                fieldValueName = item.node.fieldValueByName.name;
                break;
              }
            }
            
            if (!fieldValueId || !fieldValueName) {
              console.log("Issue is not part of the correct project or does not have the field value set");
              return;
            }
            
            // Apply field value to tracked issues
            
            const trackedIssues = JSON.parse(`${TRACKED_ISSUES}`);
            
            if (!trackedIssues) {
              console.log("Issue has no tracked issues");
              return;
            }
            
            for (const issue of trackedIssues) {
              const projectItems = issue.node.projectItems.edges;
              
              if (!projectItems) {
                continue; // TODO: Add tracked issue to project?
              }
              
              for (const item of projectItems) {
                if (item.node.project.id == projectId) {
                  const mutation = `mutation($projectId: String!, $itemId: String!, $fieldId: String!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: $projectId
                        itemId: $itemId
                        fieldId: $fieldId
                        value: { 
                          singleSelectOptionId: $optionId        
                        }
                      }
                    ) {
                      projectV2Item {
                        id
                      }
                    }
                  }`;
                  
                  const parameters = {
                    projectId,
                    itemId: item.node.id,
                    fieldId,
                    optionId: fieldValueId,
                    headers: { "GraphQL-Features": "projects_next_graphql" }
                  };
                  
                  const result = await graphql(mutation, parameters);
                  console.log(JSON.stringify(result));
                  
                  break;
                }
              }
            }
        env:
          PROJECT_ITEMS: ${{ toJSON(steps.get_field_value_and_tracked_issues.outputs.data.repository.issue.projectItems.edges) }}
          TRACKED_ISSUES: ${{ toJSON(steps.get_field_value_and_tracked_issues.outputs.data.repository.issue.trackedIssues.edges) }}
          GITHUB_TOKEN: ${{ secrets.ELEMENT_BOT_TOKEN }}

      - uses: actions/github-script@v6
        with:
          script: |
            projectId = "PVT_kwDOAM0swc4AA19d";
            fieldId = "PVTSSF_lADOAM0swc4ALoFYzgJAimw";
            fieldName = "Epic";
            
            // Query all the things via GraphQL

            const query = `query ($owner: String!, $repo: String!, $issueNumber: Int!, $fieldName: String!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issueNumber) {
                  projectItems(first: 100) {
                    edges {
                      node {
                        id
                        fieldValueByName(name: $fieldName) {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            id
                            name
                            field {
                              ... on ProjectV2SingleSelectField {
                                id
                              }
                            }
                          }
                        }
                        project {
                          id
                        }
                      }
                    }
                  }
                  trackedIssues(first: 100) {
                    edges {
                      node {
                        projectItems(first: 100) {
                          edges {
                            node {
                              id
                              project {
                                id
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }`;

            const parameters = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issueNumber: context.issue.number,
              fieldName,
              headers: { "GraphQL-Features": "projects_next_graphql" }
            };
            
            console.log(JSON.stringify(query));
            console.log(JSON.stringify(parameters));
    
            const graphql = github.graphql.defaults({
              headers: {
                "GraphQL-Features": "projects_next_graphql"
              }
            });

            const result = await graphql(query, parameters);
            console.log(JSON.stringify(result));
            
            // Check project membership and extract field value

            const projectItems = result.repository.issue.projectItems.edges;
            
            if (!projectItems) {
              console.log("Issue is not part of any projects");
              return;
            }
            
            let fieldValueId = null;
            let fieldValueName = null;

            for (const item of projectItems) {
              if (item.node.project.id == projectId && item.node.fieldValueByName && item.node.fieldValueByName.field.id == fieldId) {
                fieldValueId = item.node.fieldValueByName.id;
                fieldValueName = item.node.fieldValueByName.name;
                break;
              }
            }
            
            if (!fieldValueId || !fieldValueName) {
              console.log("Issue is not part of the correct project or does not have the field value set");
              return;
            }
            
            // Apply field value to tracked issues
            
            const trackedIssues = result.repository.issue.trackedIssues.edges;
            
            if (!trackedIssues) {
              console.log("Issue has no tracked issues");
              return;
            }
            
            for (const issue of trackedIssues) {
              const projectItems = issue.node.projectItems.edges;
              
              if (!projectItems) {
                continue; // TODO: Add tracked issue to project?
              }
              
              for (const item of projectItems) {
                if (item.node.project.id == projectId) {
                  const mutation = `mutation($projectId: String!, $itemId: String!, $fieldId: String!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: $projectId
                        itemId: $itemId
                        fieldId: $fieldId
                        value: { 
                          singleSelectOptionId: $optionId        
                        }
                      }
                    ) {
                      projectV2Item {
                        id
                      }
                    }
                  }`;
                  
                  const parameters = {
                    projectId,
                    itemId: item.node.id,
                    fieldId,
                    optionId: fieldValueId,
                    headers: { "GraphQL-Features": "projects_next_graphql" }
                  };
                  
                  const result = await graphql(mutation, parameters);
                  console.log(JSON.stringify(result));
                  
                  break;
                }
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.ELEMENT_BOT_TOKEN }}
